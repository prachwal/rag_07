# Docker Compose for RAG_07 Web System
# Provides production-ready deployment with FastAPI + Streamlit

version: '3.8'

services:
  # FastAPI Backend Service
  rag-api:
    build:
      context: .
      dockerfile: docker/Dockerfile.api
    container_name: rag_07_api
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      # API Configuration
      - HOST=0.0.0.0
      - PORT=8000

      # Provider API Keys (set in .env file)
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY:-}
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY:-}

      # Database Configuration
      - VECTOR_DB_PATH=/app/data/vector_db
      - CONFIG_PATH=/app/config

    volumes:
      # Persistent data storage
      - ./databases:/app/data
      - ./config:/app/config
      - ./logs:/app/logs

      # Configuration files
      - ./.env:/app/.env:ro

    networks:
      - rag_network

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

    depends_on:
      - redis

  # Streamlit Frontend Service
  rag-dashboard:
    build:
      context: .
      dockerfile: docker/Dockerfile.streamlit
    container_name: rag_07_dashboard
    restart: unless-stopped
    ports:
      - "8501:8501"
    environment:
      # Streamlit Configuration
      - API_BASE_URL=http://rag-api:8000
      - STREAMLIT_SERVER_PORT=8501
      - STREAMLIT_SERVER_ADDRESS=0.0.0.0

    volumes:
      # Streamlit configuration
      - ./docker/streamlit_config:/app/.streamlit

    networks:
      - rag_network

    depends_on:
      rag-api:
        condition: service_healthy

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for session management and caching
  redis:
    image: redis:7-alpine
    container_name: rag_07_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - rag_network
    command: redis-server --appendonly yes

    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy (Optional - for production)
  nginx:
    image: nginx:alpine
    container_name: rag_07_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/ssl:/etc/nginx/ssl:ro
    networks:
      - rag_network
    depends_on:
      - rag-api
      - rag-dashboard
    profiles:
      - production

# Networks
networks:
  rag_network:
    driver: bridge
    name: rag_07_network

# Volumes
volumes:
  redis_data:
    driver: local
    name: rag_07_redis_data
