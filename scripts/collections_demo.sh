#!/bin/bash
"""
Interaktywny przewodnik po kolekcjach wektorowych RAG_07
Demonstracja: tworzenie kolekcji, dodawanie dokumentÃ³w, odpytywanie
"""

set -e

echo "ðŸŽ¯ RAG_07 Collection Management Demo"
echo "===================================="
echo ""

# Kolory dla lepszej czytelnoÅ›ci
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Funkcja pauzy
pause() {
    echo ""
    echo -e "${YELLOW}NaciÅ›nij Enter aby kontynuowaÄ‡...${NC}"
    read -r
    echo ""
}

# Funkcja nagÅ‚Ã³wka
header() {
    echo -e "${BLUE}========================================${NC}"
    echo -e "${BLUE}$1${NC}"
    echo -e "${BLUE}========================================${NC}"
    echo ""
}

# Funkcja wykonania komendy z komentarzem
run_command() {
    echo -e "${GREEN}WykonujÄ™:${NC} $1"
    echo -e "${YELLOW}$2${NC}"
    echo ""
    eval "$1"
    echo ""
}

# Start demonstracji
echo "Ten skrypt pokaze Ci jak:"
echo "âœ… SprawdziÄ‡ status systemu"
echo "âœ… TworzyÄ‡ i zarzÄ…dzaÄ‡ kolekcjami"
echo "âœ… DodawaÄ‡ dokumenty"
echo "âœ… WyszukiwaÄ‡ i odpytywaÄ‡"
echo "âœ… UÅ¼ywaÄ‡ Function Calling"
echo ""
pause

# 1. Status systemu
header "1. SPRAWDZENIE STATUSU SYSTEMU"

run_command "./run.sh config-status" \
"Sprawdzamy konfiguracjÄ™ i dostÄ™pnych providerÃ³w"
pause

run_command "./run.sh list-collections" \
"Lista istniejÄ…cych kolekcji w bazie wektorowej"
pause

# 2. Tworzenie przykÅ‚adowej kolekcji
header "2. TWORZENIE KOLEKCJI I DODAWANIE DOKUMENTÃ“W"

echo "UtworzÄ™ przykÅ‚adowÄ… kolekcjÄ™ 'demo' z dokumentami:"

run_command './run.sh embed --collection demo "
Dokument: RAG_07 Overview
Typ: Dokumentacja gÅ‚Ã³wna

RAG_07 to zaawansowana aplikacja CLI do pracy z systemami LLM.
GÅ‚Ã³wne funkcjonalnoÅ›ci:
- Multi-provider LLM support (OpenAI, Anthropic, Google)
- Vector databases (FAISS, Chroma, Pinecone)
- RAG (Retrieval-Augmented Generation)
- Function Calling dla zaawansowanych interakcji
- Strukturalne logowanie i monitoring
"' \
"DodajÄ™ gÅ‚Ã³wnÄ… dokumentacjÄ™ do kolekcji 'demo'"
pause

run_command './run.sh embed --collection demo "
Dokument: CLI Commands Reference
Typ: Instrukcja uÅ¼ytkownika

DostÄ™pne komendy CLI:
- query: Zapytania do LLM
- embed: Dodawanie tekstu do bazy wektorowej
- search: Wyszukiwanie w bazie wektorowej
- rag: Zapytania RAG z kontekstem
- ask-with-tools: Zaawansowane Function Calling
- list-providers: Lista dostÄ™pnych providerÃ³w
- list-models: Lista dostÄ™pnych modeli
- config-status: Status konfiguracji
- list-collections: Lista kolekcji
- collection-info: Informacje o kolekcji
"' \
"DodajÄ™ dokumentacjÄ™ komend CLI"
pause

run_command './run.sh embed --collection demo "
Dokument: Configuration Guide
Typ: Przewodnik konfiguracji

Konfiguracja RAG_07:
1. Plik config/app_config.json - gÅ‚Ã³wna konfiguracja
2. Plik .env - klucze API dla providerÃ³w
3. Zmienne Å›rodowiskowe:
   - OPENAI_API_KEY
   - ANTHROPIC_API_KEY
   - GOOGLE_API_KEY
   - PINECONE_API_KEY

DomyÅ›lni providerzy:
- LLM: OpenAI (gpt-3.5-turbo)
- Vector DB: FAISS
- Text processor: Basic
"' \
"DodajÄ™ przewodnik konfiguracji"
pause

# 3. Sprawdzanie kolekcji
header "3. SPRAWDZENIE UTWORZONEJ KOLEKCJI"

run_command "./run.sh list-collections" \
"Sprawdzamy czy kolekcja 'demo' zostaÅ‚a utworzona"
pause

run_command "./run.sh collection-info demo" \
"SzczegÃ³Å‚owe informacje o kolekcji 'demo'"
pause

# 4. Proste wyszukiwanie
header "4. PODSTAWOWE WYSZUKIWANIE"

run_command "./run.sh search 'CLI commands' --collection demo --limit 3" \
"WyszukujÄ™ dokumenty o komendach CLI"
pause

run_command "./run.sh search 'configuration' --collection demo --limit 2" \
"WyszukujÄ™ dokumenty o konfiguracji"
pause

# 5. RAG queries
header "5. RAG - ZAPYTANIA Z KONTEKSTEM"

run_command "./run.sh rag 'What CLI commands are available?' --collection demo" \
"Zapytanie RAG o dostÄ™pne komendy"
pause

run_command "./run.sh rag 'How to configure RAG_07?' --collection demo" \
"Zapytanie RAG o konfiguracjÄ™"
pause

# 6. Function Calling - najzaawansowane
header "6. FUNCTION CALLING - ZAAWANSOWANE ODPYTYWANIE"

echo -e "${GREEN}Function Calling to najzaawansowana funkcjonalnoÅ›Ä‡ RAG_07.${NC}"
echo "LLM moÅ¼e wykonaÄ‡ wielokrotne wyszukiwania i budowaÄ‡ kompleksowe odpowiedzi."
echo ""
pause

run_command "./run.sh ask-with-tools 'What are the main features of RAG_07?' --collection demo --verbose" \
"Demonstracja Function Calling z szczegÃ³Å‚owymi logami"
pause

run_command "./run.sh ask-with-tools 'How do I get started with RAG_07?' --collection demo --verbose" \
"Pytanie o rozpoczÄ™cie pracy z systemem"
pause

# 7. ZarzÄ…dzanie wieloma kolekcjami
header "7. PRACA Z WIELOMA KOLEKCJAMI"

echo "UtworzÄ™ dodatkowÄ… kolekcjÄ™ dla przykÅ‚adÃ³w kodu:"

run_command './run.sh embed --collection code_examples "
Example: Basic Query
\`\`\`bash
./run.sh query \"Hello, how are you?\"
\`\`\`

Example: RAG Query with Context
\`\`\`bash
./run.sh rag \"Explain machine learning\" --collection knowledge --context-limit 5
\`\`\`

Example: Function Calling
\`\`\`bash
./run.sh ask-with-tools \"What is the best approach for...\" --verbose
\`\`\`
"' \
"DodajÄ™ przykÅ‚ady kodu do osobnej kolekcji"
pause

run_command "./run.sh list-collections" \
"Sprawdzamy wszystkie kolekcje"
pause

run_command "./run.sh ask-with-tools 'Show me code examples for RAG queries' --collection code_examples --verbose" \
"WyszukujÄ™ przykÅ‚ady kodu w dedykowanej kolekcji"
pause

# 8. PorÃ³wnanie kolekcji
header "8. PORÃ“WNANIE RÃ“Å»NYCH KOLEKCJI"

echo "SprawdÅºmy jak rÃ³Å¼ne kolekcje odpowiadajÄ… na to samo pytanie:"
echo ""

echo -e "${YELLOW}Pytanie do kolekcji 'demo':${NC}"
run_command "./run.sh ask-with-tools 'How to use RAG_07?' --collection demo" \
"OdpowiedÅº z dokumentacji gÅ‚Ã³wnej"

echo -e "${YELLOW}Pytanie do kolekcji 'code_examples':${NC}"
run_command "./run.sh ask-with-tools 'How to use RAG_07?' --collection code_examples" \
"OdpowiedÅº z przykÅ‚adÃ³w kodu"

echo -e "${YELLOW}Pytanie do domyÅ›lnej kolekcji (peÅ‚na dokumentacja):${NC}"
run_command "./run.sh ask-with-tools 'How to use RAG_07?' --verbose" \
"OdpowiedÅº z peÅ‚nej dokumentacji projektu"
pause

# 9. Najlepsze praktyki
header "9. NAJLEPSZE PRAKTYKI"

echo -e "${GREEN}âœ… Organizacja kolekcji:${NC}"
echo "  â€¢ UÅ¼ywaj opisowych nazw (docs_api, user_guides, faq)"
echo "  â€¢ Grupuj logicznie powiÄ…zane dokumenty"
echo "  â€¢ Oddzielaj rÃ³Å¼ne typy treÅ›ci"
echo ""

echo -e "${GREEN}âœ… Dodawanie dokumentÃ³w:${NC}"
echo "  â€¢ Dodawaj kontekst i metadane"
echo "  â€¢ UÅ¼ywaj strukturalnych opisÃ³w"
echo "  â€¢ Regularnie aktualizuj treÅ›Ä‡"
echo ""

echo -e "${GREEN}âœ… Odpytywanie:${NC}"
echo "  â€¢ UÅ¼yj Function Calling dla zÅ‚oÅ¼onych pytaÅ„"
echo "  â€¢ RAG dla prostych zapytaÅ„ z kontekstem"
echo "  â€¢ search dla szybkiego wyszukiwania"
echo ""

echo -e "${GREEN}âœ… Monitoring:${NC}"
echo "  â€¢ Regularnie sprawdzaj ./run.sh list-collections"
echo "  â€¢ Monitoruj logi z --verbose"
echo "  â€¢ Testuj rÃ³Å¼ne typy zapytaÅ„"
echo ""
pause

# 10. Automatyzacja
header "10. AUTOMATYZACJA"

echo "RAG_07 oferuje gotowe skrypty automatyzacji:"
echo ""

echo -e "${GREEN}DostÄ™pne skrypty:${NC}"
echo "  â€¢ ./scripts/index_documentation.sh - Automatyczne indeksowanie dokumentacji"
echo "  â€¢ ./scripts/index_documentation.py - Python script do zaawansowanego indeksowania"
echo ""

echo -e "${YELLOW}PrzykÅ‚ad wÅ‚asnego skryptu automatyzacji:${NC}"
cat << 'EOF'
#!/bin/bash
# auto_populate.sh
echo "ðŸ¤– Automatyczne populowanie bazy wiedzy..."

# Dokumentacja
./run.sh embed --collection docs "$(cat README.md)"
./run.sh embed --collection docs "$(cat CHANGELOG.md)"

# FAQ
./run.sh embed --collection faq "$(cat support/faq.md)"

# PrzykÅ‚ady
find examples/ -name "*.md" -exec ./run.sh embed --collection examples "$(cat {})" \;

echo "âœ… Gotowe!"
./run.sh list-collections
EOF
echo ""
pause

# Podsumowanie
header "ðŸŽ‰ PODSUMOWANIE DEMONSTRACJI"

echo -e "${GREEN}Co zostaÅ‚o zademonstrowane:${NC}"
echo "âœ… Sprawdzanie statusu systemu"
echo "âœ… Tworzenie kolekcji przez dodawanie dokumentÃ³w"
echo "âœ… Dodawanie strukturalnych dokumentÃ³w z metadanymi"
echo "âœ… Podstawowe wyszukiwanie w kolekcjach"
echo "âœ… RAG queries z kontekstem"
echo "âœ… Zaawansowane Function Calling"
echo "âœ… Praca z wieloma kolekcjami"
echo "âœ… PorÃ³wnywanie odpowiedzi z rÃ³Å¼nych kolekcji"
echo "âœ… Najlepsze praktyki"
echo "âœ… Opcje automatyzacji"
echo ""

echo -e "${GREEN}Utworzone kolekcje:${NC}"
run_command "./run.sh list-collections" \
"Finalna lista wszystkich kolekcji"

echo -e "${GREEN}NastÄ™pne kroki:${NC}"
echo "1. Przeczytaj peÅ‚nÄ… dokumentacjÄ™: docs/collections_management.md"
echo "2. Przejrzyj szybki przewodnik: docs/quick_start_collections.md"
echo "3. Eksperymentuj z wÅ‚asnymi dokumentami"
echo "4. UtwÃ³rz skrypty automatyzacji dla swoich potrzeb"
echo "5. UÅ¼yj Function Calling do odpytywania: ./run.sh ask-with-tools 'Twoje pytanie' --verbose"
echo ""

echo -e "${BLUE}ðŸš€ RAG_07 jest gotowy do uÅ¼ycia!${NC}"
echo ""

# Opcjonalne czyszczenie
echo -e "${YELLOW}Czy chcesz usunÄ…Ä‡ demo kolekcje? (y/N)${NC}"
read -r response
if [[ "$response" =~ ^[Yy]$ ]]; then
    echo "Usuwanie demonstracyjnych kolekcji..."
    rm -f databases/faiss_index/demo.*
    rm -f databases/faiss_index/code_examples.*
    echo "âœ… Demonstracyjne kolekcje zostaÅ‚y usuniÄ™te"
else
    echo "Kolekcje demonstracyjne zostaÅ‚y zachowane"
fi

echo ""
echo "ðŸŽ¯ DziÄ™kujÄ™ za uwagÄ™! MiÅ‚ego korzystania z RAG_07!"
